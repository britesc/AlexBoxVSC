# 
# os.uname()
# 
#     Return a tuple (possibly a named tuple) containing information about the underlying machine and/or its operating system. The tuple has five fields in the following order, each of them being a string:
# 
#             sysname – the name of the underlying system
# 
#             nodename – the network name (can be the same as sysname)
# 
#             release – the version of the underlying system
# 
#             version – the MicroPython version and build date
# 
#             machine – an identifier for the underlying hardware (eg board, CPU)

#  os.statvfs(path)
# 
#     Get the status of a filesystem.
# 
#     Returns a tuple with the filesystem information in the following order:
# 
#             f_bsize – file system block size
# 
#             f_frsize – fragment size
# 
#             f_blocks – size of fs in f_frsize units
# 
#             f_bfree – number of free blocks
# 
#             f_bavail – number of free blocks for unprivileged users
# 
#             f_files – number of inodes
# 
#             f_ffree – number of free inodes
# 
#             f_favail – number of free inodes for unprivileged users
# 
#             f_flag – mount flags
# 
#             f_namemax – maximum filename length

# machine.freq()          # get the current frequency of the CPU

from machine import RTC

rtc = RTC()
rtc.datetime((2017, 8, 23, 2, 12, 48, 0, 0)) # set a specific date and
                                             # time, eg. 2017/8/23 1:12:48
rtc.datetime() # get date and time

# sys.implementation
# 
#     Object with information about the current Python implementation. For MicroPython, it has following attributes:
# 
#         name - string “micropython”
# 
#         version - tuple (major, minor, micro, releaselevel), e.g. (1, 22, 0, ‘’)
# 
#         _machine - string describing the underlying machine
# 
#         _mpy - supported mpy file-format version (optional attribute)


sys.platform

    The platform that MicroPython is running on. For OS/RTOS ports, this is usually an identifier of the OS, e.g. "linux". For baremetal ports it is an identifier of a board, e.g. "pyboard" for the original MicroPython reference board. It thus can be used to distinguish one board from another. If you need to check whether your program runs on MicroPython (vs other Python implementation), use sys.implementation instead.


sys.version

    Python language version that this implementation conforms to, as a string.

 sys.version_info

    Python language version that this implementation conforms to, as a tuple of ints.
    
import gc
    gc.enable()
    gc.mem_alloc()
1312
    gc.mem_free()
2071392
    gc.collect()
19

import machine
import ubinascii

my_id = ubinascii.hexlify(machine.unique_id()).decode()
print(my_id)